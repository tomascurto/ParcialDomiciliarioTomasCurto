// C++ code
// Curto Eivers, Tomás León.

// contador de 0 a 99 utilizando dos displays de 7 segmentos
// (ánodo común) y tres botones para controlar la cuenta y 
// prender y apagar. Se utiliza la técnica de multiplexación 
// para mostrar los dígitos en los displays. 
// El contador debe comienza en 0 y es capaz de aumentar o 
// disminuir su valor en una unidad con los botones.
// Todas las resistencias son de 220 Ohm y los pulsadores son
// de tipo pullup interno y los displays son de ánodo común.

// Definicion de nombres a los pines de arduino correspondientes a
// su conexión.
#define TOPR 11
#define TOP 10
#define TOPL 9
#define MID 8
#define BOTL 7
#define BOT 6
#define BOTR 5
#define DECENA A5
#define UNIDAD A4
#define ONOFF 4
#define SUMA 3
#define RESTA 2

// Setup de pines y monitor serial.
void setup()
{
  pinMode(TOPR, OUTPUT);
  pinMode(TOP, OUTPUT);
  pinMode(TOPL, OUTPUT);
  pinMode(MID, OUTPUT);
  pinMode(BOT, OUTPUT);
  pinMode(BOTR, OUTPUT);
  pinMode(BOTL, OUTPUT);
  pinMode(UNIDAD, OUTPUT);
  pinMode(DECENA, OUTPUT);
  pinMode(ONOFF, INPUT_PULLUP);
  pinMode(SUMA, INPUT_PULLUP);
  pinMode(RESTA, INPUT_PULLUP);
  Serial.begin(9600);
}

// Defino la variable numero que se mostrara en los segmentos.
int numero = 0;

// Defino las variables que voy a usar para el pulsador 
// antirrebote de ON/OFF.
int pulsado_onoff = 0;
int estado_onoff = 0;
int prendido = LOW;

// Defino las variables que voy a usar para el pulsador 
// antirrebote de suma
int pulsado_suma = 0;
int estado_suma = 0;

// Defino las variables que voy a usar para el pulsador 
// antirrebote de resta
int pulsado_resta = 0;
int estado_resta = 0;

// Función que apaga todos los leds.
void apagar()
{
  digitalWrite(TOP, HIGH);
  digitalWrite(TOPR, HIGH);
  digitalWrite(TOPL, HIGH);
  digitalWrite(MID, HIGH);
  digitalWrite(BOT, HIGH);
  digitalWrite(BOTL, HIGH);
  digitalWrite(BOTR, HIGH);
}

//Funciones que muestran numeros del 0-9 en 7 segmentos.
void prenderCero()
{
	digitalWrite(TOP, LOW);
	digitalWrite(TOPR, LOW);
	digitalWrite(TOPL, LOW);
	digitalWrite(BOTR, LOW);
	digitalWrite(BOTL, LOW);
	digitalWrite(BOT, LOW);
}
void prenderUno()
{
	digitalWrite(TOPR, LOW);
	digitalWrite(BOTR, LOW);
}
void prenderDos()
{
	digitalWrite(TOP, LOW);
	digitalWrite(TOPR, LOW);
	digitalWrite(MID, LOW);
	digitalWrite(BOTL, LOW);
	digitalWrite(BOT, LOW);
}
void prenderTres()
{
	digitalWrite(TOP, LOW);
	digitalWrite(TOPR, LOW);
	digitalWrite(MID, LOW);
	digitalWrite(BOTR, LOW);
	digitalWrite(BOT, LOW);
  	apagar();
}
void prenderCuatro()
{
    digitalWrite(TOPR, LOW);
	digitalWrite(TOPL, LOW);
	digitalWrite(MID, LOW);
	digitalWrite(BOTR, LOW);
}
void prenderCinco()
{
    digitalWrite(TOP, LOW);
	digitalWrite(TOPL, LOW);
	digitalWrite(MID, LOW);
	digitalWrite(BOTR, LOW);
	digitalWrite(BOT, LOW);
  	apagar();
}
void prenderSeis()
{
    digitalWrite(TOP, LOW);
	digitalWrite(TOPL, LOW);
	digitalWrite(MID, LOW);
	digitalWrite(BOTR, LOW);
	digitalWrite(BOTL, LOW);
	digitalWrite(BOT, LOW);
}
void prenderSiete()
{
	digitalWrite(TOP, LOW);
	digitalWrite(TOPR, LOW);
	digitalWrite(BOTR, LOW);
}
void prenderOcho()
{		
    digitalWrite(TOP, LOW);
	digitalWrite(TOPR, LOW);
	digitalWrite(TOPL, LOW);
    digitalWrite(MID, LOW);
	digitalWrite(BOTR, LOW);
	digitalWrite(BOTL, LOW);
	digitalWrite(BOT, LOW);
}
void prenderNueve()
{
    digitalWrite(TOP, LOW);
	digitalWrite(TOPR, LOW);
	digitalWrite(TOPL, LOW);
    digitalWrite(MID, LOW);
	digitalWrite(BOTR, LOW);
	digitalWrite(BOT, LOW);
}

// Funcion unidad() muestra la unidad correspondiente en el
// 7 segmentos de la derecha, utilizando el pin
// A4 para la multiplexación.
void unidad(int numero)
{
  digitalWrite(UNIDAD, HIGH); // Enciende el display de la derecha.
  // Calcula la unidad del numero de dos cifras:
  // ej: 98 % 10 = 8;
  // luego prende los leds correspondientes.
  if (numero%10==0)
  {
  	prenderCero();
  }
  if (numero%10==1)
  {
  	prenderUno();
  }
  if (numero%10==2)
  {
  	prenderDos();
  }
  if (numero%10==3)
  {
  	prenderTres();
  }
  if (numero%10==4)
  {
  	prenderCuatro();
  }
  if (numero%10==5)
  {
  	prenderCinco();
  }
  if (numero%10==6)
  {
  	prenderSeis();
  }
  if (numero%10==7)
  {
  	prenderSiete();
  }
  if (numero%10==8)
  {
  	prenderOcho();
  }
  if (numero%10==9)
  {
  	prenderNueve();
  }
  apagar(); // apaga todos los leds.
  digitalWrite(UNIDAD, LOW); // apaga el display de la derecha.
}

// Función decena() mostrara el digito de las decenas
// en el 7 segmentos de la izquierda, utilizando el pin
// A5 para la multiplexación.
void decena(int numero)
{
  digitalWrite(DECENA, HIGH);// Enciende el display de la izquierda.
  // Calcula la decena en un numero de dos cifras:
  // ej: 98 / 10 = 9,8 el cual es menor a 10 pero mayor o igual a 9;
  // luego prende los leds correspondientes.
  if (numero/10>=0&&numero/10<1)
  {
  	prenderCero();
  }
  if (numero/10>=1&&numero/10<2)
  {
  	prenderUno();
  }
  if (numero/10>=2&&numero/10<3)
  {
  	prenderDos();
  }
  if (numero/10>=3&&numero/10<4)
  {
  	prenderTres();
  }
  if (numero/10>=4&&numero/10<5)
  {
  	prenderCuatro();
  }
  if (numero/10>=5&&numero/10<6)
  {
  	prenderCinco();
  }
  if (numero/10>=6&&numero/10<7)
  {
  	prenderSeis();
  }
  if (numero/10>=7&&numero/10<8)
  {
  	prenderSiete();
  }
  if (numero/10>=8&&numero/10<9)
  {
  	prenderOcho();
  }
  if (numero/10>=9&&numero/10<10)
  {
  	prenderNueve();
  }
  apagar(); //apaga todos los leds.
  digitalWrite(DECENA, LOW); // apaga el display de la izquierda.
}

//LOOP
void loop()
{
  //PRESION DE PULSADOR ANTI-REBOTE PULLUP INTERNO "SUMA":
  pulsado_suma = digitalRead(SUMA);// detecta si se presiona el pulsador.
  if (pulsado_suma == LOW)// pregunta si se esta presionando el pulsador.
  {
  	estado_suma = 1;// cambia de valor la variable estado.
  }
  if (estado_suma == 1 && pulsado_suma == HIGH)// pregunta si el estado es 1 pero se solto el boton.
  {
  	numero ++; //incrementa el número.
    if (numero>99) //contempla que no se pase del límite 99.
    {
      numero = 99;
    }
  	Serial.println(numero);// imprime número en "Serial Monitor".
    estado_suma = 0;// devulve al estado original.
  }
  
  //PRESION DE PULSADOR ANTI-REBOTE PULLUP INTERNO "RESTA":
  pulsado_resta = digitalRead(RESTA);// detecta si se presiona el pulsador.
  if (pulsado_resta == LOW)// pregunta si se esta presionando el pulsador.
  {
  	estado_resta = 1;// cambia de valor la variable estado.
  }
  if (estado_resta == 1 && pulsado_resta == HIGH)// pregunta si el estado es 1 pero se solto el boton.
  {
  	numero --; // disminuye el número.
    if (numero<0) //contempla que no se pase del límite 0.
    {
      numero = 0;
    }
  	Serial.println(numero);// imprime número en "Serial Monitor".
    estado_resta = 0;// devulve al estado original.
  }
  
  //PRESION DE PULSADOR ANTI-REBOTE PULLUP INTERNO "ON/OFF":
  pulsado_onoff = digitalRead(ONOFF);// detecta si se presiona el pulsador.
  if (pulsado_onoff == LOW)// pregunta si se esta presionando el pulsador.
  {
  	estado_onoff = 1;// cambia de valor la variable estado.
  }
  if (estado_onoff == 1 && pulsado_onoff == HIGH)// pregunta si el estado es 1 pero se solto el boton.
  {
  	prendido =! prendido; // prende o apaga el sistema.
    Serial.println(prendido);
    estado_onoff = 0;// devulve al estado original.
  }
  
  //EJECUCIÓN
  if (prendido == HIGH) // pregunta si el sistema fue encendido.
  {
  	decena(numero); // muestra el digito de la decena.
    unidad(numero); // muestra el digito de la unidad.
    // se utiliza el metodo de Multiplexación por el cual
    // se encieden y apagan de forma alternada los displays
    // por medio de los pines A4 y A5, a una velocidad tal que
    // el ojo humano percibe los dos prendidos al mismo tiempo.
  }
  else
  {
  	apagar(); // apaga los displays
    numero = 0; // resetea el numero al inicial
  }
  delay(15);// retraso de 15ms. agiliza el cambio en los leds 
}  